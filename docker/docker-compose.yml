version: "3.7"

services:
  config-server:
    image: micro/config-server:0.0.1-SNAPSHOT
    ports:
      - "8071:8071"
    environment:
      - "SPRING_PROFILES_ACTIVE=dev"
    networks:
      backend:
        aliases:
          - "config-server"

  eureka-server:
    image: micro/eureka-server:0.0.1-SNAPSHOT
    depends_on:
      - config-server
    ports:
      - "8070:8070"
    environment:
      - "SPRING_PROFILES_ACTIVE=dev"
    networks:
      backend:
        aliases:
          - "eureka-server"

  gateway-server:
    image: micro/gateway-server:0.0.1-SNAPSHOT
    depends_on:
      - eureka-server
    ports:
      - "8072:8072"
    environment:
      - "SPRING_PROFILES_ACTIVE=docker"
    networks:
      backend:
        aliases:
          - "gateway-server"

  customers-service:
    image: micro/customers-service:0.0.1-SNAPSHOT
    depends_on:
      - gateway-server
    ports:
      - "8073:8073"
    environment:
      - "SPRING_PROFILES_ACTIVE=dev"
    networks:
      backend:
        aliases:
          - "customers-service"

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    depends_on:
      - elasticsearch
    environment:
      - STORAGE_TYPE=elasticsearch
      - "ES_HOSTS=elasticsearch:9300"
    ports:
      - "9411:9411"
    networks:
      backend:
        aliases:
          - "zipkin"

  ##keycloak:
    ##image: jboss/keycloak
    ##depends_on:
      ##- gateway-server
    ##restart: always
    ##environment:
      ##KEYCLOAK_USER: admin
      ##KEYCLOAK_PASSWORD: admin
    ##ports:
      ##- "8080:8080"
    ##networks:
      ##backend:
        ##aliases:
          ##- "keycloak"

  ##zookeeper:
    ##image: wurstmeister/zookeeper:latest
    ##depends_on:
      ##- gateway-server
    ##ports:
      ##- 2181:2181
    ##networks:
      ##backend:
        ##aliases:
          ##- "zookeeper"

  ##kafkaserver:
    ##image: wurstmeister/kafka:latest
    ##ports:
      ##- 9092:9092
    ##environment:
      ##- KAFKA_ADVERTISED_HOST_NAME=kafka
      ##- KAFKA_ADVERTISED_PORT=9092
      ##- KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      ##- KAFKA_CREATE_TOPICS=dresses:1:1,ratings:1:1
    ##volumes:
      ##- "/var/run/docker.sock:/var/run/docker.sock"
    ##depends_on:
      ##- zookeeper
    ##networks:
      ##backend:
        ##aliases:
          ##- "kafka"

  ##redisserver:
    ##image: redis:alpine
    ##depends_on:
      ##- gateway-server
    ##ports:
      ##- 6379:6379
    ##networks:
      ##backend:
        ##aliases:
          ##- "redis"

  rabbitmq:
    image: 'rabbitmq:3.6-management-alpine'
    #image: 'rabbitmq:latest'
    ports:
      # The standard AMQP protocol port
      - '5672:5672'
      # HTTP management UI
      - '15672:15672'
    environment:
      # The location of the RabbitMQ server.  "amqp" is the protocol;
      # "rabbitmq" is the hostname.  Note that there is not a guarantee
      # that the server will start first!  Telling the pika client library
      # to try multiple times gets around this ordering issue.
      AMQP_URL: 'amqp://rabbitmq?connection_attempts=5&retry_delay=5'
      RABBITMQ_DEFAULT_USER: "user"
      RABBITMQ_DEFAULT_PASS: "secret"
    networks:
      backend:
        aliases:
          - "rabbitmq"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.7.0
    container_name: elasticsearch
    environment:
      - node.name=elasticsearch
      - discovery.type=single-node
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata1:/usr/share/elasticsearch/data
    ports:
      - 9300:9300
      - 9200:9200
    networks:
      backend:
        aliases:
          - "elasticsearch"

  kibana:
    image: docker.elastic.co/kibana/kibana:7.7.0
    container_name: kibana
    environment:
      ELASTICSEARCH_URL: "http://elasticsearch:9300"
    ports:
      - 5601:5601
    networks:
      backend:
        aliases:
          - "kibana"

  logstash:
    image: docker.elastic.co/logstash/logstash:7.7.0
    container_name: logstash
    command: logstash -f /etc/logstash/conf.d/logstash.conf
    volumes:
      - ./config:/etc/logstash/conf.d
    ports:
      - "5000:5000"
    networks:
      backend:
        aliases:
          - "logstash"

volumes:
  esdata1:
    driver: local

networks:
  backend:
    driver: bridge
